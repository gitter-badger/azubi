
module Render.BashScript(bashScriptExecuter) where

import Core.Command
import Core.Provision

--
-- This is a small renderer
-- which compiles the wishlist into a shell-script
--

bashScriptExecuter :: RenderContext -> [ Command ] -> String
bashScriptExecuter context commands =
  unlines ([ "#!/bin/bash"
           , "#"
           , "# script is automatically generated by "
           , "#                      ___.   .__ "
           , "#   _____  __________ _\\_ |__ |__|"
           , "#   \\__  \\ \\___   /  |  \\ __ \\|  |"
           , "#    / __ \\_/    /|  |  / \\_\\ \\  |"
           , "#   (____  /_____ \\____/|___  /__|"
           , "#        \\/      \\/         \\/    "
           , ""]
            ++ (bashScriptInit context)
            ++ (concat (map (commandSnippet $ BashScriptContext [] context) commands)))



bashScriptInit :: RenderContext -> [String]
bashScriptInit Root = [ "if [[ `whoami` != root ]]; then"
                  , "  echo 'you must be root to run this script !'"
                  , "  exit 1"
                  , "fi"
                  , "" ]
bashScriptInit _ = []

data BashScriptContext = BashScriptContext { dependencyStack :: [ String]
                                           , renderContext :: RenderContext
                                           }


commandSnippet :: BashScriptContext -> Command -> [ String ]

commandSnippet context (ShellCommand command) =
  [ command
  , "if [[ $? -ne 0 ]]; then"
  , "echo 'Error : running `" ++ command ++ "`' failed"
  ]
  ++ [ d ++ "=false"  | d <- (dependencyStack context) ]
  ++ ["fi"]

commandSnippet context@(BashScriptContext _ Root)(SuperUserShellCommand command) =
  commandSnippet context (ShellCommand command)

commandSnippet context@(BashScriptContext _ (User None))  (SuperUserShellCommand command) =
  commandSnippet context (InfoMsg $ "can't run superuser command `" ++ command ++ "` as Normal user")

commandSnippet context@(BashScriptContext _ (User Sudo))  (SuperUserShellCommand command) =
  commandSnippet context (ShellCommand $ "sudo \"" ++ command ++"\"" )

commandSnippet context@(BashScriptContext _ (User Su))  (SuperUserShellCommand command) =
  commandSnippet context (ShellCommand $ "su - -c \"" ++ command ++"\"" )

commandSnippet context (InfoMsg i) =
  ["echo 'INFO : " ++ i ++ "'" ]

commandSnippet context (ErrorMsg i) =
  ["echo 'ERROR: " ++ i ++ "'" ]

commandSnippet context (LogMsg i) =
  ["echo 'ERROR: " ++ i ++ "' >> azubi.log"]

commandSnippet context (IfCommand (BoolCommand b) t e) =
    ["if [[ " ++ b ++ " ]]; then" ]
    ++ bodyIndent (map (commandSnippet context) t)
    ++ ["else" ]
    ++ bodyIndent (map (commandSnippet context) e)
    ++ ["fi"]

commandSnippet context (FileContent path content) =
  [ "cat >" ++ path ++ " <<EOF" ]
  ++ content
  ++ ["EOF"]

commandSnippet context (Dependency body dependency) =
  [ dependencyVariable ++ "=true"]
  ++ concat (map (commandSnippet (BashScriptContext (dependencyVariable : (dependencyStack context)) (renderContext context ) ) ) dependency)
  ++ ["if " ++ dependencyVariable ++ "; then"]
  ++ bodyIndent (map (commandSnippet context) body)
  ++ ["fi"]
  where
    dependencyVariable :: String
    dependencyVariable = "dependency" ++ (show $ length $ dependencyStack context )


bodyIndent :: [[String]] -> [ String ]
bodyIndent content =
  map (\c -> "  " ++ c) $ concat content
